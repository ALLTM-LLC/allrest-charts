apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: allrest-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/issuer: comodo-eu-cert

    # === Global Nginx Settings (from your config) ===
    nginx.ingress.kubernetes.io/proxy-body-size: "200m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "50"
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/keepalive: "100"
    nginx.ingress.kubernetes.io/proxy-next-upstream: "error timeout invalid_header http_502 http_503 http_504"
    nginx.ingress.kubernetes.io/enable-gzip: "true"
    nginx.ingress.kubernetes.io/enable-brotli: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

    # === Rate Limiting (per IP ) - Kept from your config ===
    nginx.ingress.kubernetes.io/limit-rps: "5"
    nginx.ingress.kubernetes.io/limit-burst: "10"
    nginx.ingress.kubernetes.io/limit-connections: "50" # Reduced from 200 as a safer default
    nginx.ingress.kubernetes.io/limit-whitelist: "143.198.249.29/32"

    # === Main Configuration Snippet - MERGED & OPTIMIZED ===
    nginx.ingress.kubernetes.io/configuration-snippet: |
      # 1. BOT BLOCKING LOGIC (CRITICAL)
      # This map identifies bad bots based on their User-Agent string.
      map $http_user_agent $block_bot {
          default 0;
          # Allow known good bots explicitly
          "~*(Googlebot|Bingbot|facebot|facebookexternalhit|Twitterbot|LinkedInBot|WhatsApp|YandexBot|BaiduSpider|Slackbot|Applebot )" 0;
          # Block common malicious/aggressive bots and tools
          "~*(SemrushBot|AhrefsBot|MJ12bot|DotBot|PetalBot|Scrapy|python-requests|curl|wget|Go-http-client|Java/|okhttp|nuclei|nikto|nmap|sqlmap|masscan )" 1;
          # Block empty User-Agent
          "" 1;
      }

      # Apply the block immediately if a bad bot is detected.
      if ($block_bot = 1) {
          return 403; # Forbidden
      }

      # 2. HARD PAGINATION LIMIT (Kept from your config)
      if ($arg_page ~ "^(32[1-9]|3[3-9][0-9]|[4-9][0-9]{2,}|[1-9][0-9]{3,})$") {
          return 403; # Forbidden
      }

      # 3. SECURITY HEADERS (Kept from your config)
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

      # 4. CACHING RULES (Kept from your config)
      if ($request_uri ~* "\.(?:ico|css|js|gif|jpe?g|png|woff2?|eot|ttf|svg)$") {
          add_header Cache-Control "public, max-age=2592000" always;
      }
      if ($arg_page ~ "^[0-9]+$") {
          add_header Cache-Control "public, max-age=600" always;
      }
      # Note: Caching bots is fine, but BLOCKING bad ones is more important.
      if ($http_user_agent ~* "bot|crawl|spider" ) {
          add_header Cache-Control "public, max-age=300" always;
      }

      # 5. CORS & PREFLIGHT HANDLING (Kept from your config)
      if ($request_method = OPTIONS) {
          add_header 'Access-Control-Allow-Origin' "$http_origin" always;
          add_header 'Access-Control-Allow-Credentials' "true" always;
          add_header 'Access-Control-Allow-Methods' "GET, POST, OPTIONS, PUT, DELETE" always;
          add_header 'Access-Control-Allow-Headers' "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
          add_header 'Content-Length' 0;
          return 204;
      }
      if ($http_origin ~* "^https://([a-z0-9-]+\. )*allrestaurants\.eu$") {
          add_header 'Access-Control-Allow-Origin' "$http_origin" always;
          add_header 'Access-Control-Allow-Credentials' "true" always;
          add_header 'Access-Control-Allow-Methods' "GET, POST, OPTIONS, PUT, DELETE" always;
          add_header 'Access-Control-Allow-Headers' "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
      }

spec:
  tls:
    - hosts:
        - admin.allrestaurants.eu
        - api.allrestaurants.eu
        - allsupplier.allrestaurants.eu
        - allrestaurants.eu
        - "{{ .Values.allUrl }}"
        - "{{ .Values.mainUrl }}"
      secretName: ssl-nginx-eu-new

  rules:
    # Admin Panel
    - host: admin.allrestaurants.eu
      http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: alltm-admin-panel-service
                port:
                  number: 80

    - host: {{ .Values.adminUrl }}
      http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: alltm-admin-panel-service
                port:
                  number: 80

    # API
    - host: {{ .Values.apiUrl }}
      http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: alltm-api-service
                port:
                  number: 80

    - host: allrestaurants.eu
      http:
        paths:
          - pathType: Prefix
            path: "/api/v1/allrest/"
            backend:
              service:
                name: allrest-api-service
                port:
                  number: 80
          - pathType: Prefix
            path: "/api/v1/allsupplier"
            backend:
              service:
                name: allsupplier-api-service
                port:
                  number: 80

    # Public Website (PHP backend)
    - host: allrestaurants.eu
      http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: allrest-php-service
                port:
                  number: 80

    # Wildcard subdomains
    - host: "*.allrestaurants.eu"
      http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: allrest-php-service
                port:
                  number: 80

    - host: allrestaurants.info
      http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: allrest-php-service
                port:
                  number: 80

    # Static files
    - host: allrestaurants.eu
      http:
        paths:
          - pathType: Prefix
            path: "/svg/"
            backend:
              service:
                name: allrest-php-service
                port:
                  number: 80
          - pathType: Prefix
            path: "/js/"
            backend:
              service:
                name: allrest-php-service
                port:
                  number: 80
          - pathType: Prefix
            path: "/css/"
            backend:
              service:
                name: allrest-php-service
                port:
                  number: 80
          - pathType: Prefix
            path: "/fonts/"
            backend:
              service:
                name: allrest-php-service
                port:
                  number: 80
